// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v5.26.0
// source: api/monthCard/v1/monthCard.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMonthCardGetMonthCardList = "/api.monthCard.v1.MonthCard/GetMonthCardList"
const OperationMonthCardGetMonthCardRward = "/api.monthCard.v1.MonthCard/GetMonthCardRward"
const OperationMonthCardOpenMonthCard = "/api.monthCard.v1.MonthCard/OpenMonthCard"

type MonthCardHTTPServer interface {
	GetMonthCardList(context.Context, *GetMonthCardListRequest) (*GetMonthCardListReply, error)
	GetMonthCardRward(context.Context, *GetMonthCardRewardRequest) (*GetMonthCardRewardReply, error)
	OpenMonthCard(context.Context, *OpenMonthCardRequest) (*OpenMonthCardReply, error)
}

func RegisterMonthCardHTTPServer(s *http.Server, srv MonthCardHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/openMonthCard", _MonthCard_OpenMonthCard0_HTTP_Handler(srv))
	r.POST("/v1/getMonthCardReward", _MonthCard_GetMonthCardRward0_HTTP_Handler(srv))
	r.POST("/v1/getMonthCardList", _MonthCard_GetMonthCardList0_HTTP_Handler(srv))
}

func _MonthCard_OpenMonthCard0_HTTP_Handler(srv MonthCardHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OpenMonthCardRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMonthCardOpenMonthCard)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OpenMonthCard(ctx, req.(*OpenMonthCardRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OpenMonthCardReply)
		return ctx.Result(200, reply)
	}
}

func _MonthCard_GetMonthCardRward0_HTTP_Handler(srv MonthCardHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMonthCardRewardRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMonthCardGetMonthCardRward)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMonthCardRward(ctx, req.(*GetMonthCardRewardRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMonthCardRewardReply)
		return ctx.Result(200, reply)
	}
}

func _MonthCard_GetMonthCardList0_HTTP_Handler(srv MonthCardHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMonthCardListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMonthCardGetMonthCardList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMonthCardList(ctx, req.(*GetMonthCardListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMonthCardListReply)
		return ctx.Result(200, reply)
	}
}

type MonthCardHTTPClient interface {
	GetMonthCardList(ctx context.Context, req *GetMonthCardListRequest, opts ...http.CallOption) (rsp *GetMonthCardListReply, err error)
	GetMonthCardRward(ctx context.Context, req *GetMonthCardRewardRequest, opts ...http.CallOption) (rsp *GetMonthCardRewardReply, err error)
	OpenMonthCard(ctx context.Context, req *OpenMonthCardRequest, opts ...http.CallOption) (rsp *OpenMonthCardReply, err error)
}

type MonthCardHTTPClientImpl struct {
	cc *http.Client
}

func NewMonthCardHTTPClient(client *http.Client) MonthCardHTTPClient {
	return &MonthCardHTTPClientImpl{client}
}

func (c *MonthCardHTTPClientImpl) GetMonthCardList(ctx context.Context, in *GetMonthCardListRequest, opts ...http.CallOption) (*GetMonthCardListReply, error) {
	var out GetMonthCardListReply
	pattern := "/v1/getMonthCardList"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMonthCardGetMonthCardList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MonthCardHTTPClientImpl) GetMonthCardRward(ctx context.Context, in *GetMonthCardRewardRequest, opts ...http.CallOption) (*GetMonthCardRewardReply, error) {
	var out GetMonthCardRewardReply
	pattern := "/v1/getMonthCardReward"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMonthCardGetMonthCardRward))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MonthCardHTTPClientImpl) OpenMonthCard(ctx context.Context, in *OpenMonthCardRequest, opts ...http.CallOption) (*OpenMonthCardReply, error) {
	var out OpenMonthCardReply
	pattern := "/v1/openMonthCard"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMonthCardOpenMonthCard))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
